%%  Two FFT

%Fs = 25 * 10^6;
Fs = 1000;
Fc = 500;

T = 1/Fs;             % Sampling period       
L = 1024;             % Length of signal
t = (0:L-1)*T;        % Time vector

S = sin(2*pi*50*t) + sin(2*pi*120*t);
X = S + 2*randn(size(t));
YS = fft(S);
YX = fft(X);

f = Fs*(0:(L/2))/L;

P2S = abs(YS/L);
P1S = P2S(1:L/2+1);
P1S(2:end-1) = 2*P1S(2:end-1);

P2X = abs(YX/L);
P1X = P2X(1:L/2+1);
P1X(2:end-1) = 2*P1X(2:end-1);


figure(4);
plot(1000*t(1:50),S(1:50))
title('Signal Uncorrupted')
xlabel('t (milliseconds)')
ylabel('S(t)')

figure(5);
plot(1000*t(1:50),X(1:50))
title('Signal Corrupted with Zero-Mean Random Noise')
xlabel('t (milliseconds)')
ylabel('X(t)')

figure(6);
plot(f,P1X) 
title('Single-Sided Amplitude Spectrum of X(t)')
xlabel('f (Hz)')
ylabel('|P1(f)|')

figure(7);
plot(f,P1S) 
title('Single-Sided Amplitude Spectrum of S(t)')
xlabel('f (Hz)')
ylabel('|P1(f)|')

%% Own CIFAR

% Threshold = Threshold factor(a) * noise power of training cells (Pn)

%definables
NumTrainingCells = 14;
NumGuardCells = 2;
NumCells = length(P1X);
ProbabilityFalseAlarm = 1e-2;

%calculation outputs
NumTrainingCellsHalf = round(NumTrainingCells/2);
NumGuardCellsHalf = round(NumGuardCells/2);
NumOnSide = NumTrainingCellsHalf + NumGuardCellsHalf;

ThresholdFactorAlpha = NumTrainingCells*(ProbabilityFalseAlarm^(-1/NumTrainingCells) -1);

peak_idx = zeros(length(P1X),1);

Thresh_array = zeros(length(P1X),1);

for i = 1 + NumOnSide: NumCells - NumOnSide
    [Temp_A, TempB] = max(P1X(i - NumOnSide: i+NumOnSide + 1 -1));
    if i ~= i - NumOnSide + TempB - 1
        Thresh_array(i) = Thresh_array(i-1);
        continue
    end
    
%   Sum1 = sum([P1X(i) - NumOnSide:P1X(i) + NumOnSide + 1]);
    Sum1 = sum(P1X(i - NumOnSide: i + NumOnSide + 1 - 1));
%   Sum2 = sum([P1X(i) - NumGuardCellsHalf: P1X(i) + NumGuardCellsHalf+1]);
    Sum2 = sum(P1X(i - NumGuardCellsHalf:i + NumGuardCellsHalf + 1 - 1));
    NoisePower = (Sum1 - Sum2) / NumTrainingCells;
    Threshold = ThresholdFactorAlpha * NoisePower;
    Thresh_array(i) = Threshold;
    
%     if P1X[i + 1] > Threshold
%         peak_idx(i - 1) = P1X(i - 1)
%     end

    if P1X(i) > Threshold
         peak_idx(i) = P1X(i)
    end

end

figure(8);
plot(f,P1X,f,peak_idx,'o',f,Thresh_array);
